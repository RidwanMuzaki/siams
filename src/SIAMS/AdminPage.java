/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SIAMS;

import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLIntegrityConstraintViolationException;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author zaki
 */
public final class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPage
     */
    public AdminPage() {
        initComponents();
    }

    public AdminPage(String uname) {
        initComponents();
        nameLbl.setText(uname);
        loadDataLogRecord();
        loadDataAchievement();
        loadAchievementTableData();
        loadStudentData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminPanel = new javax.swing.JPanel();
        adminTabbedPanels = new javax.swing.JTabbedPane();
        achievementRecordTabbedPane = new javax.swing.JPanel();
        achievementRecordScrollPane = new javax.swing.JScrollPane();
        achievementRecordTable = new javax.swing.JTable();
        logRecordTabbedPane = new javax.swing.JPanel();
        logRecordScrollPane = new javax.swing.JScrollPane();
        logRecordTable = new javax.swing.JTable();
        achievementTypeTabbedPane = new javax.swing.JPanel();
        achievementTypePanel = new javax.swing.JPanel();
        achievementTypeTableScrollPane = new javax.swing.JScrollPane();
        achievementTypeTable = new javax.swing.JTable();
        idSelectedAchievementTypeLbl = new javax.swing.JLabel();
        idSelectedTypeTxt = new javax.swing.JTextField();
        selectedAchievementTypeLbl = new javax.swing.JLabel();
        selectedAchievementTypeTxt = new javax.swing.JTextField();
        clearAchievementTypeBtn = new javax.swing.JButton();
        addAchievementTypeBtn = new javax.swing.JToggleButton();
        updateAchievementTypeBtn = new javax.swing.JButton();
        deleteAchievementTypeBtn = new javax.swing.JButton();
        addStudentTabbedPane = new javax.swing.JPanel();
        addStudentPanel = new javax.swing.JPanel();
        studentTableScroolPane = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        idStudentLbl = new javax.swing.JLabel();
        idStudentTxt = new javax.swing.JTextField();
        studentNameLbl = new javax.swing.JLabel();
        studentNameTxt = new javax.swing.JTextField();
        studentPasswordLbl = new javax.swing.JLabel();
        studentPasswordTxt = new javax.swing.JTextField();
        studentEmailLbl = new javax.swing.JLabel();
        studentEmailTxt = new javax.swing.JTextField();
        clearStudentBtn = new javax.swing.JButton();
        addStudentBtn = new javax.swing.JButton();
        updateStudentBtn = new javax.swing.JButton();
        deleteStudentBtn = new javax.swing.JButton();
        nameLbl = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admistrative Page");
        setLocation(new java.awt.Point(0, 0));

        adminPanel.setBackground(new java.awt.Color(204, 204, 204));

        adminTabbedPanels.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                adminTabbedPanelsStateChanged(evt);
            }
        });

        achievementRecordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        achievementRecordTable.setDefaultEditor(Object.class, null);
        achievementRecordScrollPane.setViewportView(achievementRecordTable);

        javax.swing.GroupLayout achievementRecordTabbedPaneLayout = new javax.swing.GroupLayout(achievementRecordTabbedPane);
        achievementRecordTabbedPane.setLayout(achievementRecordTabbedPaneLayout);
        achievementRecordTabbedPaneLayout.setHorizontalGroup(
            achievementRecordTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, achievementRecordTabbedPaneLayout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addComponent(achievementRecordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );
        achievementRecordTabbedPaneLayout.setVerticalGroup(
            achievementRecordTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(achievementRecordTabbedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(achievementRecordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        adminTabbedPanels.addTab("Achievement Record", achievementRecordTabbedPane);

        logRecordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        logRecordTable.setDefaultEditor(Object.class, null);
        logRecordScrollPane.setViewportView(logRecordTable);

        javax.swing.GroupLayout logRecordTabbedPaneLayout = new javax.swing.GroupLayout(logRecordTabbedPane);
        logRecordTabbedPane.setLayout(logRecordTabbedPaneLayout);
        logRecordTabbedPaneLayout.setHorizontalGroup(
            logRecordTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logRecordTabbedPaneLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(logRecordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(705, Short.MAX_VALUE))
        );
        logRecordTabbedPaneLayout.setVerticalGroup(
            logRecordTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logRecordTabbedPaneLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(logRecordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        adminTabbedPanels.addTab("Log Record", logRecordTabbedPane);

        achievementTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        achievementTypeTable.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && achievementTypeTable.getSelectedRow() != -1) {
                populateAchievementTypeFieldFromSelectedRow();
            }
        });
        achievementTypeTable.setDefaultEditor(Object.class, null);
        achievementTypeTableScrollPane.setViewportView(achievementTypeTable);

        idSelectedAchievementTypeLbl.setText("ID");

        idSelectedTypeTxt.setEditable(false);

        selectedAchievementTypeLbl.setText("Selected Achievement Type");

        clearAchievementTypeBtn.setText("Clear");
        clearAchievementTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAchievementTypeBtnActionPerformed(evt);
            }
        });

        addAchievementTypeBtn.setBackground(new java.awt.Color(102, 255, 102));
        addAchievementTypeBtn.setText("Add");
        addAchievementTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAchievementTypeBtnActionPerformed(evt);
            }
        });

        updateAchievementTypeBtn.setBackground(new java.awt.Color(102, 102, 255));
        updateAchievementTypeBtn.setText("Update");
        updateAchievementTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAchievementTypeBtnActionPerformed(evt);
            }
        });

        deleteAchievementTypeBtn.setBackground(new java.awt.Color(255, 102, 102));
        deleteAchievementTypeBtn.setText("Delete");
        deleteAchievementTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAchievementTypeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout achievementTypePanelLayout = new javax.swing.GroupLayout(achievementTypePanel);
        achievementTypePanel.setLayout(achievementTypePanelLayout);
        achievementTypePanelLayout.setHorizontalGroup(
            achievementTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(achievementTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(achievementTypeTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(achievementTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(achievementTypePanelLayout.createSequentialGroup()
                        .addGroup(achievementTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(idSelectedTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectedAchievementTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(clearAchievementTypeBtn))
                    .addComponent(idSelectedAchievementTypeLbl)
                    .addComponent(selectedAchievementTypeLbl)
                    .addGroup(achievementTypePanelLayout.createSequentialGroup()
                        .addComponent(addAchievementTypeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(updateAchievementTypeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteAchievementTypeBtn)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        achievementTypePanelLayout.setVerticalGroup(
            achievementTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(achievementTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(achievementTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(achievementTypeTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(achievementTypePanelLayout.createSequentialGroup()
                        .addComponent(idSelectedAchievementTypeLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(achievementTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idSelectedTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearAchievementTypeBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedAchievementTypeLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedAchievementTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(achievementTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateAchievementTypeBtn)
                            .addComponent(deleteAchievementTypeBtn)
                            .addComponent(addAchievementTypeBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout achievementTypeTabbedPaneLayout = new javax.swing.GroupLayout(achievementTypeTabbedPane);
        achievementTypeTabbedPane.setLayout(achievementTypeTabbedPaneLayout);
        achievementTypeTabbedPaneLayout.setHorizontalGroup(
            achievementTypeTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(achievementTypeTabbedPaneLayout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addComponent(achievementTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(436, Short.MAX_VALUE))
        );
        achievementTypeTabbedPaneLayout.setVerticalGroup(
            achievementTypeTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(achievementTypeTabbedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(achievementTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(284, Short.MAX_VALUE))
        );

        adminTabbedPanels.addTab("Achievement Type", achievementTypeTabbedPane);

        studentTable.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && studentTable.getSelectedRow() != -1) {
                populateStudentFieldFromSelectedRow();
            }
        });
        studentTable.setDefaultEditor(Object.class, null);
        studentTableScroolPane.setViewportView(studentTable);

        idStudentLbl.setText("ID");

        studentNameLbl.setText("Name");

        studentPasswordLbl.setText("Password");

        studentEmailLbl.setText("E-Mail");

        clearStudentBtn.setText("Clear");
        clearStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStudentBtnActionPerformed(evt);
            }
        });

        addStudentBtn.setBackground(new java.awt.Color(102, 255, 102));
        addStudentBtn.setText("Add");
        addStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentBtnActionPerformed(evt);
            }
        });

        updateStudentBtn.setBackground(new java.awt.Color(102, 102, 255));
        updateStudentBtn.setText("Update");
        updateStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStudentBtnActionPerformed(evt);
            }
        });

        deleteStudentBtn.setBackground(new java.awt.Color(255, 102, 102));
        deleteStudentBtn.setText("Delete");
        deleteStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStudentBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addStudentPanelLayout = new javax.swing.GroupLayout(addStudentPanel);
        addStudentPanel.setLayout(addStudentPanelLayout);
        addStudentPanelLayout.setHorizontalGroup(
            addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentTableScroolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addStudentPanelLayout.createSequentialGroup()
                        .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idStudentLbl)
                            .addComponent(idStudentTxt)
                            .addComponent(studentNameLbl)
                            .addComponent(studentNameTxt)
                            .addComponent(studentPasswordLbl)
                            .addComponent(studentPasswordTxt)
                            .addComponent(studentEmailLbl)
                            .addComponent(studentEmailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(clearStudentBtn))
                    .addGroup(addStudentPanelLayout.createSequentialGroup()
                        .addComponent(addStudentBtn)
                        .addGap(18, 18, 18)
                        .addComponent(updateStudentBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteStudentBtn)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        addStudentPanelLayout.setVerticalGroup(
            addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentTableScroolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addStudentPanelLayout.createSequentialGroup()
                        .addComponent(idStudentLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idStudentTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearStudentBtn))
                        .addGap(18, 18, 18)
                        .addComponent(studentNameLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(studentPasswordLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentPasswordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(studentEmailLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentEmailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateStudentBtn)
                            .addComponent(deleteStudentBtn)
                            .addComponent(addStudentBtn))))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        ((AbstractDocument) idStudentTxt.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
                if (isInteger(string) || string.isEmpty()) {
                    super.insertString(fb, offset, string, attr);
                }
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                if (isInteger(text) || text.isEmpty()) {
                    super.replace(fb, offset, length, text, attrs);
                }
            }

            private boolean isInteger(String text) {
                try {
                    Integer.parseInt(text);
                    return true;
                } catch (NumberFormatException e) {
                    return false;
                }
            }
        });

        javax.swing.GroupLayout addStudentTabbedPaneLayout = new javax.swing.GroupLayout(addStudentTabbedPane);
        addStudentTabbedPane.setLayout(addStudentTabbedPaneLayout);
        addStudentTabbedPaneLayout.setHorizontalGroup(
            addStudentTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentTabbedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addStudentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(328, Short.MAX_VALUE))
        );
        addStudentTabbedPaneLayout.setVerticalGroup(
            addStudentTabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentTabbedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addStudentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        adminTabbedPanels.addTab("Add Student", addStudentTabbedPane);

        nameLbl.setText("Admin");

        logoutBtn.setBackground(new java.awt.Color(255, 102, 102));
        logoutBtn.setText("LOGOUT");
        logoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminPanelLayout = new javax.swing.GroupLayout(adminPanel);
        adminPanel.setLayout(adminPanelLayout);
        adminPanelLayout.setHorizontalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn)
                .addGap(18, 18, 18)
                .addComponent(nameLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(adminTabbedPanels)
        );
        adminPanelLayout.setVerticalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logoutBtn)
                    .addComponent(nameLbl))
                .addGap(18, 18, 18)
                .addComponent(adminTabbedPanels))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(logoutBtn, "Are you sure?");
        if (a == JOptionPane.YES_OPTION) {
            dispose();
            LoginPage lp = new LoginPage();
            lp.setVisible(true);
        }
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void addStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentBtnActionPerformed
        // TODO add your handling code here:
        String sql = "INSERT INTO user_table (id, type, name, password, email) VALUES (?, ?, ?, ?, ?)";
        String idStudent = idStudentTxt.getText();
        String nmStudent = studentNameTxt.getText();
        String psStudent = studentPasswordTxt.getText();
        String emStudent = studentEmailTxt.getText();

        if (areAnyFieldEmpty(idStudent, nmStudent, psStudent, emStudent)) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Incomplete Form", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, idStudent);
            pst.setString(2, "Student");
            pst.setString(3, nmStudent);
            pst.setString(4, psStudent);
            pst.setString(5, emStudent);

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Student successfully added.");
                clearStudentBtnActionPerformed(evt);

            }
        } catch (SQLIntegrityConstraintViolationException ex) {
            JOptionPane.showMessageDialog(this, "The ID: " + idStudent + " already exists!", "Duplicate ID", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addStudentBtnActionPerformed

    private void deleteStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStudentBtnActionPerformed
        // TODO add your handling code here:
        String sql = "DELETE FROM user_table WHERE id=?";
        String idStudent = idStudentTxt.getText();

        if (isFieldEmpty(idStudent)) {
            JOptionPane.showMessageDialog(this, "No student selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, idStudent);

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Student successfully deleted.");
                loadStudentData();
                clearStudentBtnActionPerformed(evt);
            } else {
                JOptionPane.showMessageDialog(this, "No student found with the given ID.", "Non-existing ID", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteStudentBtnActionPerformed

    private void updateStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStudentBtnActionPerformed
        // TODO add your handling code here:
        String sql = "UPDATE user_table SET name=?, password=?, email=? WHERE id=?";
        String idStudent = idStudentTxt.getText();
        String nmStudent = studentNameTxt.getText();
        String psStudent = studentPasswordTxt.getText();
        String emStudent = studentEmailTxt.getText();

        if (isFieldEmpty(idStudent)) {
            JOptionPane.showMessageDialog(this, "No student selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (areAnyFieldEmpty(nmStudent, psStudent, emStudent)) {
            JOptionPane.showMessageDialog(new JFrame(), "Please fill in all required fields.", "Incomplete Form", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            String sqlCheck = "SELECT name, email, password FROM user_table WHERE id=?";
            PreparedStatement pstCheck = con.prepareStatement(sqlCheck);
            pstCheck.setString(1, idStudent);
            ResultSet rs = pstCheck.executeQuery();

            if (rs.next()) {
                String currentName = rs.getString("name");
                String currentPassword = rs.getString("password");
                String currentEmail = rs.getString("email");

                boolean isNameChanged = !nmStudent.equals(currentName);
                boolean isPasswordChanged = !psStudent.equals(currentPassword);
                boolean isEmailChanged = !emStudent.equals(currentEmail);

                if (isNameChanged || isPasswordChanged || isEmailChanged) {
                    PreparedStatement pst = con.prepareStatement(sql);
                    pst.setString(1, nmStudent);
                    pst.setString(2, psStudent);
                    pst.setString(3, emStudent);
                    pst.setString(4, idStudent);

                    int rowsAffected = pst.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Student information updated successfully.");
                        loadStudentData();
                        clearStudentBtnActionPerformed(evt);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No changes were made. The values are identical.", "Update Unnecessary", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No student found with the given ID.", "Non-existing ID", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateStudentBtnActionPerformed

    private void clearStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStudentBtnActionPerformed
        // TODO add your handling code here:
        JTextField[] fieldsToClear = {idStudentTxt, studentNameTxt, studentPasswordTxt, studentEmailTxt};
        for (JTextField field : fieldsToClear) {
            field.setText("");
        }
        studentTable.clearSelection();
    }//GEN-LAST:event_clearStudentBtnActionPerformed

    private void populateStudentFieldFromSelectedRow() {
        int selectedRow = studentTable.getSelectedRow();
        if (selectedRow != -1) {
            String idStudent = studentTable.getValueAt(selectedRow, 0).toString();
            String nmStudent = studentTable.getValueAt(selectedRow, 1).toString();
            String psStudent = studentTable.getValueAt(selectedRow, 2).toString();
            String emStudent = studentTable.getValueAt(selectedRow, 3).toString();

            idStudentTxt.setText(idStudent);
            studentNameTxt.setText(nmStudent);
            studentPasswordTxt.setText(psStudent);
            studentEmailTxt.setText(emStudent);
        }
    }

    private void addAchievementTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAchievementTypeBtnActionPerformed
        // TODO add your handling code here:
        JFrame newFrame = new JFrame("New Achievement");
        newFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        JTextField textField = new JTextField(20);
        JButton addButton = new JButton("Add");

        panel.add(Box.createVerticalStrut(30));
        panel.add(new JLabel("Enter New Achievement Type: "));
        panel.add(textField);
        panel.add(addButton);

        addButton.addActionListener((ActionEvent e) -> {
            String sql = "INSERT INTO achievement_type (name) VALUES (?)";
            String ntp = textField.getText();
            if (isFieldEmpty(ntp)) {
                JOptionPane.showMessageDialog(null, "Please enter new achievement type.", "Incomplete Form", JOptionPane.WARNING_MESSAGE);
                return;
            }
            try (Connection con1 = Connectionz.getConnection()) {
                PreparedStatement pst = con1.prepareStatement(sql);
                pst.setString(1, ntp);
                int affectedRow = pst.executeUpdate();
                if (affectedRow > 0) {
                    JOptionPane.showMessageDialog(null, "Achievement Type successfully added.");
                    loadAchievementTableData();
                    newFrame.dispose();
                }
            } catch (SQLIntegrityConstraintViolationException ex) {
                JOptionPane.showMessageDialog(null, "Achievement Type: " + ntp + " already exists!", "Duplicate Type", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        newFrame.getContentPane().add(panel);

        newFrame.setSize(300, 150);
        newFrame.setLocationRelativeTo(null);
        newFrame.setVisible(true);
    }//GEN-LAST:event_addAchievementTypeBtnActionPerformed

    private void deleteAchievementTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAchievementTypeBtnActionPerformed
        // TODO add your handling code here:
        String sql = "DELETE FROM achievement_type WHERE id=?";
        String ist = idSelectedTypeTxt.getText();

        if (isFieldEmpty(ist)) {
            JOptionPane.showMessageDialog(this, "No achievement type is selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, ist);
            int affectedRow = pst.executeUpdate();
            if (affectedRow > 0) {
                JOptionPane.showMessageDialog(this, "Achievement Type successfully deleted.");
                loadAchievementTableData();
                clearAchievementTypeBtnActionPerformed(evt);
            } else {
                JOptionPane.showMessageDialog(this, "No achievement type found with the given ID.", "Non-existing ID", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteAchievementTypeBtnActionPerformed

    private void updateAchievementTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAchievementTypeBtnActionPerformed
        // TODO add your handling code here:
        String sql = "UPDATE achievement_type SET name=? WHERE id=?";
        String ist = idSelectedTypeTxt.getText();
        String ntp = selectedAchievementTypeTxt.getText();

        if (isFieldEmpty(ist)) {
            JOptionPane.showMessageDialog(new JFrame(), "No achievement type is selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (isFieldEmpty(ntp)) {
            JOptionPane.showMessageDialog(null, "Please enter new achievement type.", "Incomplete Form", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            String sqlCheck = "SELECT name FROM achievement_type WHERE id=?";
            PreparedStatement pstCheck = con.prepareStatement(sqlCheck);
            pstCheck.setString(1, ist);
            ResultSet rs = pstCheck.executeQuery();

            if (rs.next()) {
                String currentName = rs.getString("name");
                boolean isNameChanged = !ntp.equals(currentName);

                if (isNameChanged) {
                    PreparedStatement pst = con.prepareStatement(sql);
                    pst.setString(1, ntp);
                    pst.setString(2, ist);

                    int rowsAffected = pst.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Achievement type information updated successfully.");
                        loadAchievementTableData();
                        clearAchievementTypeBtnActionPerformed(evt);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No changes were made. The values are identical.", "Update Unnecessary", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No achievement type found with the given ID.", "Non-existing ID", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateAchievementTypeBtnActionPerformed

    private void clearAchievementTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAchievementTypeBtnActionPerformed
        // TODO add your handling code here:
        JTextField[] fieldsToClear = {idSelectedTypeTxt, selectedAchievementTypeTxt};
        for (JTextField field : fieldsToClear) {
            field.setText("");
        }
    }//GEN-LAST:event_clearAchievementTypeBtnActionPerformed

    private void populateAchievementTypeFieldFromSelectedRow() {
        int selectedRow = achievementTypeTable.getSelectedRow();
        if (selectedRow != -1) {
            String ist = achievementTypeTable.getValueAt(selectedRow, 0).toString();
            String ntp = achievementTypeTable.getValueAt(selectedRow, 1).toString();

            idSelectedTypeTxt.setText(ist);
            selectedAchievementTypeTxt.setText(ntp);
        }
        achievementTypeTable.clearSelection();
    }

    private void adminTabbedPanelsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_adminTabbedPanelsStateChanged
        // TODO add your handling code here:
        int selectedIndex = adminTabbedPanels.getSelectedIndex();

        switch (selectedIndex) {
            case 0:
                setSize(950, 600);
                break;
            case 1:
                setSize(425, 600);
                break;
            case 2:
                setSize(650, 600);
                break;
            case 3:
                setSize(750, 600);
                break;
            default:
                break;
        }

        setLocationRelativeTo(null);
    }//GEN-LAST:event_adminTabbedPanelsStateChanged

    private void loadDataLogRecord() {
        String sql = "SELECT * FROM log_record ORDER BY id DESC";

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery(sql);

            DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "User ID", "Date & Time"}, 0);
            logRecordTable.setModel(model);

            while (rs.next()) {
                int ide = rs.getInt("id");
                int usi = rs.getInt("userId");
                String dnt = rs.getString("dateTime");
                model.addRow(new Object[]{ide, usi, dnt});
            }

            setColumnWidths(logRecordTable, 25, 50, 125);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadDataAchievement() {
        String sql = "SELECT ac.id, ac.student_id, s.name AS student_name, act.name AS achievement_type, ac.file_name, ac.reviewer_id, r.name AS reviewer_name, ac.status, ac.reviewedDate "
                + "FROM achievement_table ac "
                + "LEFT JOIN user_table s ON ac.student_id = s.id "
                + "LEFT JOIN user_table r ON ac.reviewer_id = r.id "
                + "JOIN achievement_type act ON ac.achievement_type = act.id "
                + "ORDER BY ac.id ASC";

        try (Connection con = Connectionz.getConnection();) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery(sql);

            DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Student ID", "Student Name", "Achievement Type", "File Name", "Reviewer ID", "Reviewer Name", "Status", "Reviewed Date"}, 0);
            achievementRecordTable.setModel(model);

            while (rs.next()) {
                int ide = rs.getInt("id");
                String sid = rs.getString("student_id");
                String snm = rs.getString("student_name");
                String act = rs.getString("achievement_type");
                String fnm = rs.getString("file_name");
                String rvi = rs.getString("reviewer_id");
                String rnm = rs.getString("reviewer_name");
                String sts = rs.getString("status");
                String rvd = rs.getString("reviewedDate");
                model.addRow(new Object[]{ide, sid, snm, act, fnm, rvi, rnm, sts, rvd});
            }

            setColumnWidths(achievementRecordTable, 30, 70, 90, 180, 100, 70, 90, 80, 130);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadAchievementTableData() {
        String sql = "SELECT * FROM achievement_type ORDER BY id ASC";

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery(sql);

            DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Name"}, 0);
            achievementTypeTable.setModel(model);

            while (rs.next()) {
                int ide = rs.getInt("id");
                String nm = rs.getString("name");
                model.addRow(new Object[]{ide, nm});
            }

            setColumnWidths(achievementTypeTable, 5, 150);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadStudentData() {
        String sql = "SELECT * FROM user_table WHERE type='student' ORDER BY id ASC";

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery(sql);

            DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Name", "Password", "E-Mail"}, 0);
            studentTable.setModel(model);

            while (rs.next()) {
                int ids = rs.getInt("id");
                String nms = rs.getString("name");
                String pss = rs.getString("password");
                String ems = rs.getString("email");
                model.addRow(new Object[]{ids, nms, pss, ems});
            }

            setColumnWidths(studentTable, 20, 40, 40, 160);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void setColumnWidths(JTable table, int... widths) {
        TableColumnModel columnModel = table.getColumnModel();
        for (int i = 0; i < widths.length && i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setPreferredWidth(widths[i]);
        }
    }

    private static boolean isFieldEmpty(String field) {
        return field == null || field.trim().isEmpty();
    }

    private boolean areAnyFieldEmpty(String... fields) {
        for (String field : fields) {
            if (field == null || field.trim().isEmpty()) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane achievementRecordScrollPane;
    private javax.swing.JPanel achievementRecordTabbedPane;
    private javax.swing.JTable achievementRecordTable;
    private javax.swing.JPanel achievementTypePanel;
    private javax.swing.JPanel achievementTypeTabbedPane;
    private javax.swing.JTable achievementTypeTable;
    private javax.swing.JScrollPane achievementTypeTableScrollPane;
    private javax.swing.JToggleButton addAchievementTypeBtn;
    private javax.swing.JButton addStudentBtn;
    private javax.swing.JPanel addStudentPanel;
    private javax.swing.JPanel addStudentTabbedPane;
    private javax.swing.JPanel adminPanel;
    private javax.swing.JTabbedPane adminTabbedPanels;
    private javax.swing.JButton clearAchievementTypeBtn;
    private javax.swing.JButton clearStudentBtn;
    private javax.swing.JButton deleteAchievementTypeBtn;
    private javax.swing.JButton deleteStudentBtn;
    private javax.swing.JLabel idSelectedAchievementTypeLbl;
    private javax.swing.JTextField idSelectedTypeTxt;
    private javax.swing.JLabel idStudentLbl;
    private javax.swing.JTextField idStudentTxt;
    private javax.swing.JScrollPane logRecordScrollPane;
    private javax.swing.JPanel logRecordTabbedPane;
    private javax.swing.JTable logRecordTable;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JLabel selectedAchievementTypeLbl;
    private javax.swing.JTextField selectedAchievementTypeTxt;
    private javax.swing.JLabel studentEmailLbl;
    private javax.swing.JTextField studentEmailTxt;
    private javax.swing.JLabel studentNameLbl;
    private javax.swing.JTextField studentNameTxt;
    private javax.swing.JLabel studentPasswordLbl;
    private javax.swing.JTextField studentPasswordTxt;
    private javax.swing.JTable studentTable;
    private javax.swing.JScrollPane studentTableScroolPane;
    private javax.swing.JButton updateAchievementTypeBtn;
    private javax.swing.JButton updateStudentBtn;
    // End of variables declaration//GEN-END:variables
}
