/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SIAMS;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author zaki
 */
public class ReviewerPage extends javax.swing.JFrame {

    /**
     * Creates new form CandidatePage
     */
    private ProfilePage pp;
    String id;

    public ReviewerPage() {
        initComponents();
    }

    public ReviewerPage(String uname, String ident) {
        initComponents();
        nameLbl.setText(uname);
        id = ident;
        loadData();
        comboBoxData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reviewerPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        studentIdSearchLbl = new javax.swing.JLabel();
        studentIdSearchTxt = new javax.swing.JTextField();
        studentNameSearchLbl = new javax.swing.JLabel();
        studentNameSearchTxt = new javax.swing.JTextField();
        achivementTypeSearchLbl = new javax.swing.JLabel();
        achievementTypeSearchCmb = new javax.swing.JComboBox();
        approverIdSearchLbl = new javax.swing.JLabel();
        approverIdSearchTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        restoreBtn = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        formPanel = new javax.swing.JPanel();
        idFormLbl = new javax.swing.JLabel();
        idFormTxt = new javax.swing.JTextField();
        studentIdFormLbl = new javax.swing.JLabel();
        studentIdFormTxt = new javax.swing.JTextField();
        achievementTypeFormLbl = new javax.swing.JLabel();
        achievementTypeFormTxt = new javax.swing.JTextField();
        achievementFileFormLbl = new javax.swing.JLabel();
        achievementFileFormSP = new javax.swing.JScrollPane();
        achievementFileFormTA = new javax.swing.JTextArea();
        downloadBtn = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        statusCmb = new javax.swing.JComboBox();
        changeBtn = new javax.swing.JButton();
        exportPanel = new javax.swing.JPanel();
        exportBtn = new javax.swing.JButton();
        optionPanel = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        profileBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reviewer Page");

        reviewerPanel.setBackground(new java.awt.Color(204, 204, 204));

        searchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        studentIdSearchLbl.setText("Student ID:");

        studentNameSearchLbl.setText("Student Name:");

        achivementTypeSearchLbl.setText("Achievement Type:");

        achievementTypeSearchCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        approverIdSearchLbl.setText("Approver ID:");

        searchBtn.setBackground(new java.awt.Color(102, 102, 255));
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        restoreBtn.setBackground(new java.awt.Color(102, 255, 102));
        restoreBtn.setText("Restore");
        restoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentIdSearchLbl)
                    .addComponent(studentIdSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentNameSearchLbl)
                    .addComponent(studentNameSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(achivementTypeSearchLbl)
                    .addComponent(achievementTypeSearchCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(approverIdSearchLbl)
                    .addComponent(approverIdSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(restoreBtn)
                .addGap(18, 18, 18)
                .addComponent(searchBtn)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(approverIdSearchLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(approverIdSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(achivementTypeSearchLbl)
                        .addGap(29, 29, 29))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(studentNameSearchLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studentNameSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(achievementTypeSearchCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(studentIdSearchLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentIdSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(restoreBtn)
                    .addComponent(searchBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        table.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && table.getSelectedRow() != -1) {
                populateFormFieldFromSelectedRow();
            }
        });
        table.setDefaultEditor(Object.class, null);
        tableScrollPane.setViewportView(table);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScrollPane)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addContainerGap())
        );

        formPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        idFormLbl.setText("ID");

        idFormTxt.setEditable(false);

        studentIdFormLbl.setText("Student ID");

        studentIdFormTxt.setEditable(false);

        achievementTypeFormLbl.setText("Achievement Type");

        achievementTypeFormTxt.setEditable(false);

        achievementFileFormLbl.setText("Achievement File");

        achievementFileFormTA.setColumns(20);
        achievementFileFormTA.setRows(5);
        achievementFileFormSP.setViewportView(achievementFileFormTA);

        downloadBtn.setText("Download");
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()), "Status:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        statusCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pending", "Dismissed", "Approved" }));

        changeBtn.setBackground(new java.awt.Color(102, 255, 102));
        changeBtn.setText("Change");
        changeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changeBtn)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeBtn))
                .addContainerGap())
        );

        exportPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Export:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        exportBtn.setBackground(new java.awt.Color(102, 102, 255));
        exportBtn.setText("Choose Date");
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout exportPanelLayout = new javax.swing.GroupLayout(exportPanel);
        exportPanel.setLayout(exportPanelLayout);
        exportPanelLayout.setHorizontalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        exportPanelLayout.setVerticalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(exportBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(downloadBtn)
                    .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(idFormTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idFormLbl)
                        .addComponent(studentIdFormLbl)
                        .addComponent(studentIdFormTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(achievementFileFormLbl)
                        .addComponent(achievementTypeFormTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(achievementTypeFormLbl)
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(exportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(achievementFileFormSP, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(idFormLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idFormTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentIdFormLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentIdFormTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(achievementTypeFormLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(achievementTypeFormTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(achievementFileFormLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(achievementFileFormSP, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadBtn)
                .addGap(18, 18, 18)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        optionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        nameLbl.setText("Candidate");

        profileBtn.setText("PROFILE");
        profileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileBtnActionPerformed(evt);
            }
        });

        logoutBtn.setBackground(new java.awt.Color(255, 102, 102));
        logoutBtn.setText("LOGOUT");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(profileBtn)
                .addGap(18, 18, 18)
                .addComponent(logoutBtn)
                .addContainerGap())
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logoutBtn)
                    .addComponent(profileBtn)
                    .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout reviewerPanelLayout = new javax.swing.GroupLayout(reviewerPanel);
        reviewerPanel.setLayout(reviewerPanelLayout);
        reviewerPanelLayout.setHorizontalGroup(
            reviewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reviewerPanelLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(reviewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reviewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(formPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 9, Short.MAX_VALUE))
        );
        reviewerPanelLayout.setVerticalGroup(
            reviewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reviewerPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(reviewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(reviewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(formPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reviewerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reviewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(logoutBtn, "Are you sure?");
        if (a == JOptionPane.YES_OPTION) {
            dispose();
            LoginPage lp = new LoginPage();
            lp.setVisible(true);
        }
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void profileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileBtnActionPerformed
        // TODO add your handling code here:
        if (pp == null || !pp.isVisible()) {
            pp = new ProfilePage(id); // Create a new ProfilePage instance
            pp.setVisible(true);       // Make the ProfilePage visible
        } else {
            pp.requestFocus();         // Bring the ProfilePage into focus
        }
    }//GEN-LAST:event_profileBtnActionPerformed

    private void populateFormFieldFromSelectedRow() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String ida = table.getValueAt(selectedRow, 0).toString();
            String sid = table.getValueAt(selectedRow, 1).toString();
            String atp = table.getValueAt(selectedRow, 3).toString();
            String afl = table.getValueAt(selectedRow, 4).toString();

            idFormTxt.setText(ida);
            studentIdFormTxt.setText(sid);
            achievementTypeFormTxt.setText(atp);
            achievementFileFormTA.setText(afl);
        }
    }

    private void changeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeBtnActionPerformed
        // TODO add your handling code here:
        String sql = "UPDATE achievement_table SET reviewer_id=?, status=?, reviewedDate=? WHERE id=?";
        String ida = idFormTxt.getText();
        String stt = (String) statusCmb.getSelectedItem().toString();
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = currentDateTime.format(formatter);

        if (isFieldEmpty(ida)) {
            JOptionPane.showMessageDialog(this, "No record selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, id);
            pst.setString(2, stt);
            pst.setString(3, formattedDateTime);
            pst.setString(4, ida);

            pst.executeUpdate();
            loadData();
            JOptionPane.showMessageDialog(this, "Record changed to '" + stt + "' status successfully.");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_changeBtnActionPerformed

    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
        // TODO add your handling code here:
        String sql = "SELECT file_name, achievement_file FROM achievement_table WHERE id=?";
        String fid = idFormTxt.getText();

        if (isFieldEmpty(fid)) {
            JOptionPane.showMessageDialog(new JFrame(), "No record selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, fid);
            ResultSet resultSet = pst.executeQuery();

            if (resultSet.next()) {
                byte[] fileBytes = resultSet.getBytes("achievement_file");
                String fileName = resultSet.getString("file_name");
                String directoryPath = "Downloaded PDF";
                File directory = new File(directoryPath);
                // Create the directory if it doesn't exist
                if (!directory.exists()) {
                    directory.mkdirs();
                }
                // Concatenate the directory path and file name
                String filePath = directoryPath + "/" + fileName;
                try (OutputStream outputStream = new FileOutputStream(filePath)) {
                    outputStream.write(fileBytes);
                    JOptionPane.showMessageDialog(this, "PDF retrieved successfully ans saved to: " + filePath);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No PDF found for the selected record.", "Download Error", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_downloadBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        StringBuilder condition = new StringBuilder();
        String ssi = studentIdSearchTxt.getText();
        String ssn = studentNameSearchTxt.getText();
        String sai = achievementTypeSearchCmb.getSelectedItem().toString();
        String sap = approverIdSearchTxt.getText();

        if (!isFieldEmpty(ssi)) {
            condition.append("ac.student_id = ? AND ");
        }
        if (!isFieldEmpty(ssn)) {
            condition.append("s.name LIKE ? AND ");
        }
        String at = null;
        if (!isFieldEmpty(sai)) {
            String typeQuery = "SELECT id FROM `achievement_type` WHERE name=?";
            try (Connection con = Connectionz.getConnection()) {
                PreparedStatement pst = con.prepareStatement(typeQuery);
                pst.setString(1, sai);
                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    at = rs.getString(1);
                    condition.append("ac.achievement_type = ? AND ");
                } else {
                    JOptionPane.showMessageDialog(this, "Achievement type not found.", "Non-existing Type", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (!isFieldEmpty(sap)) {
            condition.append("ac.reviewer_id = ? AND ");
        }
        if (condition.length() > 0) {
            condition.setLength(condition.length() - 5); // Remove trailing "AND"
        }

        String sql = "SELECT ac.id, ac.student_id, s.name AS student_name, act.name AS achievement_type, ac.file_name, ac.reviewer_id, r.name AS reviewer_name, ac.status, ac.reviewedDate "
                + "FROM achievement_table ac "
                + "LEFT JOIN user_table s ON ac.student_id = s.id "
                + "LEFT JOIN user_table r ON ac.reviewer_id = r.id "
                + "JOIN achievement_type act ON ac.achievement_type = act.id ";

        if (condition.length() > 0) {
            sql += "WHERE " + condition.toString() + " ";
        }
        sql += "ORDER BY ac.id ASC";

        try (Connection con = Connectionz.getConnection(); PreparedStatement pst = con.prepareStatement(sql)) {

            int paramIndex = 1;
            if (!isFieldEmpty(ssi)) {
                pst.setString(paramIndex++, ssi);
            }
            if (!isFieldEmpty(ssn)) {
                pst.setString(paramIndex++, "%" + ssn + "%"); // Add wildcards for LIKE
            }
            if (at != null) {
                pst.setString(paramIndex++, at);
            }
            if (!isFieldEmpty(sap)) {
                pst.setString(paramIndex++, sap);
            }

            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Student ID", "Student Name", "Achievement Type", "File Name", "Reviewer ID", "Reviewer Name", "Status", "Reviewed Date"}, 0);
            table.setModel(model);

            while (rs.next()) {
                int ide = rs.getInt("id");
                String sid = rs.getString("student_id");
                String snm = rs.getString("student_name");
                String act = rs.getString("achievement_type");
                String fnm = rs.getString("file_name");
                String rvi = rs.getString("reviewer_id");
                String rnm = rs.getString("reviewer_name");
                String sts = rs.getString("status");
                String rvd = rs.getString("reviewedDate");
                model.addRow(new Object[]{ide, sid, snm, act, fnm, rvi, rnm, sts, rvd});
            }

            setColumnWidths(table, 30, 70, 90, 180, 100, 70, 90, 80, 120);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void restoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreBtnActionPerformed
        // TODO add your handling code here:
        loadData();
        JComponent[] fieldsToClear = {studentIdSearchTxt, studentNameSearchTxt, achievementTypeSearchCmb, approverIdSearchTxt};
        for (JComponent component : fieldsToClear) {
            if (component instanceof JTextField) {
                ((JTextField) component).setText("");
            } else if (component instanceof JComboBox) {
                ((JComboBox<?>) component).setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_restoreBtnActionPerformed

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        // TODO add your handling code here:
        // Create and configure the frame
        JFrame frame = new JFrame("Export Achievement Data");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(5, 5, 5, 5);

        panel.add(new JLabel("From:"), gbc);
        gbc.gridy++;
        panel.add(new JLabel("To:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        JSpinner fromDateSpinner = createSpinner();
        panel.add(fromDateSpinner, gbc);
        gbc.gridy++;
        JSpinner toDateSpinner = createSpinner();
        panel.add(toDateSpinner, gbc);

        JButton submitButton = new JButton("Submit");
        submitButton.addActionListener(e -> {
            Date fromDate = adjustDate((Date) fromDateSpinner.getValue(), true); // Set to 00:00:00
            Date toDate = adjustDate((Date) toDateSpinner.getValue(), false);   // Set to 23:59:59

            if (fromDate.after(toDate)) {
                JOptionPane.showMessageDialog(frame, "'From' date cannot be after 'To' date.", "Date Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String sql = "SELECT ac.id, ac.student_id, s.name AS student_name, act.name AS achievement_type, ac.file_name, ac.reviewer_id, r.name AS reviewer_name, ac.status, ac.reviewedDate "
                    + "FROM achievement_table ac "
                    + "LEFT JOIN user_table s ON ac.student_id = s.id "
                    + "LEFT JOIN user_table r ON ac.reviewer_id = r.id "
                    + "JOIN achievement_type act ON ac.achievement_type = act.id "
                    + "WHERE ac.status = 'Approved' "
                    + "AND ac.reviewedDate BETWEEN ? AND ?"
                    + "ORDER BY ac.id ASC";
            try (Connection con = Connectionz.getConnection()) {
                PreparedStatement pst = con.prepareStatement(sql);
//                pst.setString(1, formattedFromDate);
//                pst.setString(2, formattedToDate);
                pst.setTimestamp(1, new java.sql.Timestamp(fromDate.getTime()));
                pst.setTimestamp(2, new java.sql.Timestamp(toDate.getTime()));
                ResultSet rs = pst.executeQuery();

                // Create a workbook
                Workbook workbook = new XSSFWorkbook();
                Sheet sheet = workbook.createSheet("Achievement Table");

                writeResultSetToSheet(rs, sheet);

                // Create directory if it doesn't exist
                Path folderPath = Paths.get("Exported Excel");
                if (!Files.exists(folderPath)) {
                    Files.createDirectories(folderPath);
                }

                // Write the workbook to a file inside the folder
                String filePath = folderPath.resolve("achievement_data.xlsx").toString();
                try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                    workbook.write(fileOut);
                    JOptionPane.showMessageDialog(frame, "Excel file created: " + filePath);
                } catch (IOException err) {
                    err.printStackTrace();
                }

                workbook.close();
                frame.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Export Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        });

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(submitButton);

        frame.add(panel, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_exportBtnActionPerformed

    private JSpinner createSpinner() {
        SpinnerDateModel spinnerModel = new SpinnerDateModel(new java.util.Date(), null, null, Calendar.DAY_OF_MONTH);
        JSpinner spinner = new JSpinner(spinnerModel);
        JSpinner.DateEditor editor = new JSpinner.DateEditor(spinner, "yyyy/MM/dd");
        spinner.setEditor(editor);
        return spinner;
    }

    private Date adjustDate(Date date, boolean isStartOfDay) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        if (isStartOfDay) {
            cal.set(Calendar.HOUR_OF_DAY, 0);
            cal.set(Calendar.MINUTE, 0);
            cal.set(Calendar.SECOND, 0);
        } else {
            cal.set(Calendar.HOUR_OF_DAY, 23);
            cal.set(Calendar.MINUTE, 59);
            cal.set(Calendar.SECOND, 59);
        }
        return cal.getTime();
    }

    private void writeResultSetToSheet(ResultSet rs, Sheet sheet) throws SQLException {
        Row headerRow = sheet.createRow(0);
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for (int i = 0; i < columnCount; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(metaData.getColumnLabel(i + 1));
        }

        int rowNum = 1;
        while (rs.next()) {
            Row row = sheet.createRow(rowNum++);
            for (int i = 0; i < columnCount; i++) {
                Cell cell = row.createCell(i);
                String value = rs.getString(i + 1);
                cell.setCellValue(value != null ? value : "");
            }
        }
    }

    private void loadData() {
        String sql = "SELECT ac.id, ac.student_id, s.name AS student_name, act.name AS achievement_type, ac.file_name, ac.reviewer_id, r.name AS reviewer_name, ac.status, ac.reviewedDate "
                + "FROM achievement_table ac "
                + "LEFT JOIN user_table s ON ac.student_id = s.id "
                + "LEFT JOIN user_table r ON ac.reviewer_id = r.id "
                + "JOIN achievement_type act ON ac.achievement_type = act.id "
                + "ORDER BY ac.id ASC";

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Student ID", "Student Name", "Achievement Type", "File Name", "Reviewer ID", "Reviewer Name", "Status", "Reviewed Date"}, 0);
            table.setModel(model);

            while (rs.next()) {
                int ide = rs.getInt("id");
                String sid = rs.getString("student_id");
                String snm = rs.getString("student_name");
                String act = rs.getString("achievement_type");
                String fnm = rs.getString("file_name");
                String rvi = rs.getString("reviewer_id");
                String rnm = rs.getString("reviewer_name");
                String sts = rs.getString("status");
                String rvd = rs.getString("reviewedDate");
                model.addRow(new Object[]{ide, sid, snm, act, fnm, rvi, rnm, sts, rvd});
            }

            setColumnWidths(table, 30, 70, 90, 180, 100, 70, 90, 80, 120);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void setColumnWidths(JTable table, int... widths) {
        TableColumnModel columnModel = table.getColumnModel();
        for (int i = 0; i < widths.length && i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setPreferredWidth(widths[i]);
        }
    }

    private void comboBoxData() {
        String sql = "SELECT name FROM achievement_type";

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            Vector<String> data = new Vector<>();
            data.add("");
            while (rs.next()) {
                data.add(rs.getString("name"));
            }

            achievementTypeSearchCmb.setModel(new DefaultComboBoxModel<>(data));
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static boolean isFieldEmpty(String field) {
        return field == null || field.trim().isEmpty();
    }

    private boolean areAnyFieldEmpty(String... fields) {
        for (String field : fields) {
            if (field == null || field.trim().isEmpty()) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReviewerPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel achievementFileFormLbl;
    private javax.swing.JScrollPane achievementFileFormSP;
    private javax.swing.JTextArea achievementFileFormTA;
    private javax.swing.JLabel achievementTypeFormLbl;
    private javax.swing.JTextField achievementTypeFormTxt;
    private javax.swing.JComboBox achievementTypeSearchCmb;
    private javax.swing.JLabel achivementTypeSearchLbl;
    private javax.swing.JLabel approverIdSearchLbl;
    private javax.swing.JTextField approverIdSearchTxt;
    private javax.swing.JButton changeBtn;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JButton exportBtn;
    private javax.swing.JPanel exportPanel;
    private javax.swing.JPanel formPanel;
    private javax.swing.JLabel idFormLbl;
    private javax.swing.JTextField idFormTxt;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JButton profileBtn;
    private javax.swing.JButton restoreBtn;
    private javax.swing.JPanel reviewerPanel;
    private javax.swing.JButton searchBtn;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JComboBox statusCmb;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel studentIdFormLbl;
    private javax.swing.JTextField studentIdFormTxt;
    private javax.swing.JLabel studentIdSearchLbl;
    private javax.swing.JTextField studentIdSearchTxt;
    private javax.swing.JLabel studentNameSearchLbl;
    private javax.swing.JTextField studentNameSearchTxt;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
}
