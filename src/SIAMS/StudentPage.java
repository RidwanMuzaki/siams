/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SIAMS;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.Variant;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 *
 * @author zaki
 */
public class StudentPage extends javax.swing.JFrame {

    /**
     * Creates new form CandidatePage
     */
    private ProfilePage pp;
    String id;

    public StudentPage() {
        initComponents();
    }

    public StudentPage(String uname, String ident) {
        initComponents();
        nameLbl.setText(uname);
        id = ident;
        loadData();
        comboBoxData();
        System.out.println(idAchievementTxt.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        studentPanel = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        formPanel = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        profileBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        idAchievementLbl = new javax.swing.JLabel();
        idAchievementTxt = new javax.swing.JTextField();
        clearBtn = new javax.swing.JButton();
        typeLbl = new javax.swing.JLabel();
        typeCmb = new javax.swing.JComboBox();
        filePnl = new javax.swing.JPanel();
        fileTxt = new javax.swing.JTextField();
        uploadBtn = new javax.swing.JButton();
        downloadBtn = new javax.swing.JButton();
        operationPnl = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        exportBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Page");
        setSize(new java.awt.Dimension(600, 550));

        studentPanel.setBackground(new java.awt.Color(204, 204, 204));

        tablePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        table.setAutoscrolls(false);
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && table.getSelectedRow() != -1) {
                populateFormFieldFromSelectedRow();
            }
        });
        table.setDefaultEditor(Object.class, null);
        tableScrollPane.setViewportView(table);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        formPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        formPanel.setPreferredSize(new java.awt.Dimension(500, 550));

        nameLbl.setText("Candidate");

        profileBtn.setText("PROFILE");
        profileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileBtnActionPerformed(evt);
            }
        });

        logoutBtn.setBackground(new java.awt.Color(255, 102, 102));
        logoutBtn.setText("LOGOUT");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        idAchievementLbl.setText("Achievement ID");

        idAchievementTxt.setEditable(false);
        idAchievementTxt.setMaximumSize(new java.awt.Dimension(324, 20));

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        typeLbl.setText("Type");

        typeCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Published Paper", "Scientific Contest", "Patents", "Computer Software Copyright" }));
        typeCmb.setMaximumSize(new java.awt.Dimension(324, 20));

        filePnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "File Operation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        fileTxt.setEditable(false);

        uploadBtn.setText("Upload");
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        downloadBtn.setText("Download");
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filePnlLayout = new javax.swing.GroupLayout(filePnl);
        filePnl.setLayout(filePnlLayout);
        filePnlLayout.setHorizontalGroup(
            filePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filePnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downloadBtn)))
                .addContainerGap())
        );
        filePnlLayout.setVerticalGroup(
            filePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downloadBtn)
                    .addComponent(uploadBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        operationPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Record Operation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        addBtn.setBackground(new java.awt.Color(102, 255, 102));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 102, 102));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(102, 102, 255));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnBtnActionPerformed(evt);
            }
        });

        exportBtn.setBackground(new java.awt.Color(255, 102, 255));
        exportBtn.setText("Export");
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout operationPnlLayout = new javax.swing.GroupLayout(operationPnl);
        operationPnl.setLayout(operationPnlLayout);
        operationPnlLayout.setHorizontalGroup(
            operationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, operationPnlLayout.createSequentialGroup()
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(exportBtn))
                    .addGroup(operationPnlLayout.createSequentialGroup()
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBtn)))
                .addContainerGap())
        );
        operationPnlLayout.setVerticalGroup(
            operationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(deleteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(operationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportBtn)
                    .addComponent(updateBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filePnl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typeCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idAchievementLbl)
                            .addComponent(typeLbl)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(formPanelLayout.createSequentialGroup()
                                    .addComponent(nameLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(profileBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(logoutBtn))
                                .addGroup(formPanelLayout.createSequentialGroup()
                                    .addComponent(idAchievementTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(clearBtn)))
                            .addComponent(operationPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profileBtn)
                    .addComponent(logoutBtn)
                    .addComponent(nameLbl))
                .addGap(1, 1, 1)
                .addComponent(idAchievementLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idAchievementTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(typeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filePnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout studentPanelLayout = new javax.swing.GroupLayout(studentPanel);
        studentPanel.setLayout(studentPanelLayout);
        studentPanelLayout.setHorizontalGroup(
            studentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        studentPanelLayout.setVerticalGroup(
            studentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentPanelLayout.createSequentialGroup()
                .addGroup(studentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(studentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void populateFormFieldFromSelectedRow() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String ida = table.getValueAt(selectedRow, 0).toString();
            String tp = table.getValueAt(selectedRow, 1).toString();
            String fl = table.getValueAt(selectedRow, 2).toString();

            // Set the data to fields or components
            idAchievementTxt.setText(ida);
            typeCmb.setSelectedItem(tp);
            fileTxt.setText(fl);
        }
    }

    private void profileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileBtnActionPerformed
        // TODO add your handling code here:
        if (pp == null || !pp.isVisible()) {
            pp = new ProfilePage(id); // Create a new ProfilePage instance
            pp.setVisible(true);       // Make the ProfilePage visible
        } else {
            pp.requestFocus();         // Bring the ProfilePage into focus
        }
    }//GEN-LAST:event_profileBtnActionPerformed

    private void updateBtnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnBtnActionPerformed
        // TODO add your handling code here:
        String sql = "SELECT * FROM achievement_table WHERE id= ?";
        String fid = idAchievementTxt.getText();
        String tp = typeCmb.getSelectedItem().toString();
        String tpn = getAchievementTypeKey(tp);
        String fl = fileTxt.getText();

        if (isFieldEmpty(fid)) {
            JOptionPane.showMessageDialog(this, "No record selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, fid);

            ResultSet rs = pst.executeQuery();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No record found with the given ID.", "Non-existing ID", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String tempFl = rs.getString("file_name");
            boolean isFileChanged = !fl.equals(tempFl);

            if (isFileChanged) {
                pst = con.prepareStatement("UPDATE achievement_table SET achievement_type=?, file_name=?, achievement_file=? WHERE id=?");
                File pdfFile = new File(fl);
                FileInputStream inputStream = new FileInputStream(pdfFile);
                String fileName = pdfFile.getName();

                pst.setString(1, tpn);
                pst.setString(2, fileName);
                pst.setBinaryStream(3, inputStream);
                pst.setString(4, fid);
            } else {
                pst = con.prepareStatement("UPDATE achievement_table SET achievement_type=? WHERE id=?");
                pst.setString(1, tpn);
                pst.setString(2, fid);
            }

            pst.executeUpdate();
            loadData();
            JOptionPane.showMessageDialog(this, "Record updated successfully!");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateBtnBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // Define the array of components you want to reset
        JComponent[] fieldsToClear = {typeCmb, fileTxt, idAchievementTxt};

        // Loop through each component and reset its value
        for (JComponent component : fieldsToClear) {
            if (component instanceof JTextField) {
                ((JTextField) component).setText("");  // Clear the text in JTextField
            } else if (component instanceof JComboBox) {
                ((JComboBox<?>) component).setSelectedIndex(0);  // Reset JComboBox to default (first item)
            }
        }

        // After clearing fields, clear the selection and reset the selection to the first row
        table.clearSelection();  // Clear current selection
    }//GEN-LAST:event_clearBtnActionPerformed

    private void deleteBtnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnBtnActionPerformed
        // TODO add your handling code here:
        String sql = "DELETE FROM achievement_table WHERE id=?";
        String fid = idAchievementTxt.getText();

        if (isFieldEmpty(fid)) {
            JOptionPane.showMessageDialog(this, "No record selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, fid);

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Record successfully deleted.");
                loadData();
                clearBtnActionPerformed(evt);
            } else {
                JOptionPane.showMessageDialog(this, "No record found with the given ID.", "Non-existing ID", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnBtnActionPerformed

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF Files", "pdf");
        fileChooser.setFileFilter(filter);

        fileChooser.setApproveButtonText("Upload");

        try {
            int result = fileChooser.showOpenDialog(this); // Assuming 'this' refers to the current JFrame
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                String filePath = selectedFile.getAbsolutePath();
                fileTxt.setText(filePath);
            } else {
                JOptionPane.showMessageDialog(this, "No file selected.", "File Selection", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error selecting file: " + ex.getMessage(), "File Selection Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_uploadBtnActionPerformed

    private void addBtnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnBtnActionPerformed
        // TODO add your handling code here:
        String sql = "INSERT INTO achievement_table (student_id, achievement_type, file_name, achievement_file) VALUES (?, ?, ?, ?)";
        String fid = idAchievementTxt.getText();
        String tp = typeCmb.getSelectedItem().toString();
        String tpn = getAchievementTypeKey(tp);
        String fl = fileTxt.getText();

        if (!isFieldEmpty(fid)) {
            JOptionPane.showMessageDialog(this, "Please clear Achievement ID field using the 'Clear' button before adding new record.", "Action Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (isFieldEmpty(fl)) {
            JOptionPane.showMessageDialog(this, "Please upload pdf file", "Incomplete Form", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);

            File pdfFile = new File(fl);
            FileInputStream inputStream = new FileInputStream(pdfFile);
            String fileName = pdfFile.getName();

            pst.setString(1, id);
            pst.setString(2, tpn);
            pst.setString(3, fileName);
            pst.setBinaryStream(4, inputStream);
            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Record successfully added.");
            loadData();
            clearBtnActionPerformed(evt);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(logoutBtn, "Are you sure?");
        if (a == JOptionPane.YES_OPTION) {
            dispose();
            LoginPage lp = new LoginPage();
            lp.setVisible(true);
        }
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
        // TODO add your handling code here:
        String sql = "SELECT file_name, achievement_file FROM achievement_table WHERE id=?";
        String fid = idAchievementTxt.getText();

        if (isFieldEmpty(fid)) {
            JOptionPane.showMessageDialog(this, "No record selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, fid);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                byte[] fileBytes = rs.getBytes("achievement_file");
                String fileName = rs.getString("file_name");
                try (OutputStream outputStream = new FileOutputStream(fileName)) {
                    outputStream.write(fileBytes);
                    JOptionPane.showMessageDialog(this, "PDF retrieved successfully");
                }
            } else {
                JOptionPane.showMessageDialog(this, "PDF file not found!", "Non-existing File", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_downloadBtnActionPerformed

    private void exportBtnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnBtnActionPerformed
        // TODO add your handling code here:
        String sql = "SELECT ac.id, ac.student_id, s.name AS student_name, act.name AS achievement_type, ac.file_name, ac.reviewer_id, r.name AS reviewer_name, ac.status, ac.reviewedDate "
                + "FROM achievement_table ac "
                + "LEFT JOIN user_table s ON ac.student_id = s.id "
                + "LEFT JOIN user_table r ON ac.reviewer_id = r.id "
                + "JOIN achievement_type act ON ac.achievement_type = act.id "
                + "WHERE ac.id = ?";
        String fid = idAchievementTxt.getText();

        if (isFieldEmpty(fid)) {
            JOptionPane.showMessageDialog(this, "No Record selected", "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Check if the record have been approved
        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, fid);
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    String sts = rs.getString("status");

                    if (sts == null) {
                        JOptionPane.showMessageDialog(this, "Record has not been reviewed yet.", "Not Reviewed", JOptionPane.INFORMATION_MESSAGE);
                    } else if ("Approved".equalsIgnoreCase(sts)) {
                        String rid = rs.getString("id");
                        String studentId = rs.getString("student_id");
                        String studentName = rs.getString("student_name");
                        String achievementType = rs.getString("achievement_type");
                        String fileName = rs.getString("file_name");
                        String reviewerId = rs.getString("reviewer_id");
                        String reviewerName = rs.getString("reviewer_name");
                        String status = rs.getString("status");
                        String reviewedDateTime = rs.getString("reviewedDate");

                        String[] parts = reviewedDateTime.split(" ");
                        String datePart = parts[0]; // Date part (e.g., "2024-05-13")
                        String timePart = parts[1];

                        generateDocument(rid, studentId, studentName, achievementType, fileName, reviewerId, reviewerName, datePart, timePart);
                        JOptionPane.showMessageDialog(this, "Record successfully Exported");
                    } else {
                        JOptionPane.showMessageDialog(this, "Record is under review. Current status: " + sts, "Under Review", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No matching record found.", "Non-existing Record", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_exportBtnBtnActionPerformed

    private void generateDocument(String rid, String studentId, String studentName, String achievementType,
            String fileName, String reviewerId, String reviewerName, String datePart, String timePart) {
        try {
            // Ensure the output directory exists
            File baseDir = new File("Exported Record");
            if (!baseDir.exists()) {
                baseDir.mkdirs(); // Create directories if they don't exist
            }

            // Prepare file paths
            String wordFileName = rid + "_" + studentId + "_" + studentName + ".docx";
            String pdfFileName = rid + "_" + studentId + "_" + studentName + ".pdf";
            File wordFile = new File(baseDir, wordFileName);
            File pdfFile = new File(baseDir, pdfFileName);

            // Load the template
            try (FileInputStream fis = new FileInputStream("Exported Record/template.docx")) {

                XWPFDocument document = new XWPFDocument(fis);

                // Get the first table in the document
                XWPFTable table = document.getTableArray(0);

                // Update values in the table
                updateTableCell(table, 0, 1, rid);
                updateTableCell(table, 1, 1, studentId);
                updateTableCell(table, 1, 3, studentName);
                updateTableCell(table, 2, 1, achievementType);
                updateTableCell(table, 2, 3, fileName);
                updateTableCell(table, 3, 1, reviewerId);
                updateTableCell(table, 3, 3, reviewerName);
                updateTableCell(table, 4, 1, datePart);
                updateTableCell(table, 4, 3, timePart);

                // Save the updated Word document
                try (FileOutputStream fos = new FileOutputStream(wordFile)) {
                    document.write(fos);
                }
            }

            // Convert Word document to PDF
            convertWordToPDF(wordFile.getAbsolutePath(), pdfFile.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while generating the document: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private static void updateTableCell(XWPFTable table, int rowIndex, int colIndex, String newValue) {
        XWPFTableRow row = table.getRow(rowIndex);
        if (row == null) {
            System.out.println("Row index " + rowIndex + " does not exist.");
            return;
        }
        XWPFTableCell cell = row.getCell(colIndex);
        if (cell == null) {
            System.out.println("Column index " + colIndex + " does not exist in row " + rowIndex + ".");
            return;
        }

        // Create a new paragraph and run
        XWPFParagraph paragraph = cell.getParagraphs().get(0);
        XWPFRun run = paragraph.createRun();

        // Set the font family to Times New Roman
        run.setFontFamily("Times New Roman");

        // Set the text value
        run.setText(newValue);
    }

    private static void convertWordToPDF(String inputPath, String outputPath) {
        ActiveXComponent app = null;
        try {
            app = new ActiveXComponent("Word.Application");
            app.setProperty("Visible", false);

            Dispatch docs = app.getProperty("Documents").toDispatch();
            Dispatch doc = Dispatch.call(docs, "Open", inputPath).toDispatch();

            Dispatch.call(doc, "SaveAs", outputPath, new Variant(17)); // 17 is the PDF file format

            Dispatch.call(doc, "Close", false);

            // Delete the input Word document
            File inputFile = new File(inputPath);
            if (inputFile.exists()) {
                inputFile.delete();
                System.out.println("Input Word document deleted successfully.");
            } else {
                System.out.println("Input Word document does not exist.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (app != null) {
                app.invoke("Quit", new Variant[]{});
            }
        }
    }

    public void loadData() {
        String sql = "SELECT ac.id, act.name AS achievement_type, ac.file_name, ac.reviewer_id, r.name AS reviewer_name, ac.status, ac.reviewedDate "
                + "FROM achievement_table ac "
                + "LEFT JOIN user_table s ON ac.student_id = s.id "
                + "LEFT JOIN user_table r ON ac.reviewer_id = r.id "
                + "JOIN achievement_type act ON ac.achievement_type = act.id "
                + "WHERE ac.student_id = ? "
                + "ORDER BY ac.id ASC";
        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, id);

            ResultSet rs = pst.executeQuery();

            DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Achievement Type", "File Name", "Reviewer ID", "Reviewer Name", "Status", "Reviewed Date"}, 0);
            table.setModel(model);

            while (rs.next()) {
                int ide = rs.getInt("id");
                String act = rs.getString("achievement_type");
                String fnm = rs.getString("file_name");
                String rvi = rs.getString("reviewer_id");
                String rnm = rs.getString("reviewer_name");
                String sts = rs.getString("status");
                String rvd = rs.getString("reviewedDate");
                model.addRow(new Object[]{ide, act, fnm, rvi, rnm, sts, rvd});
            }

            // Set specific column widths after populating the table
            setColumnWidths(table, 30, 180, 100, 80, 100, 80, 140);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void comboBoxData() {
        String sql = "SELECT name FROM achievement_type ORDER BY id ASC";

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            Vector<String> data = new Vector<>();
            while (rs.next()) {
                data.add(rs.getString("name"));
            }

            typeCmb.setModel(new DefaultComboBoxModel<>(data));
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while fetching data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void setColumnWidths(JTable table, int... widths) {
        TableColumnModel columnModel = table.getColumnModel();
        for (int i = 0; i < widths.length && i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setPreferredWidth(widths[i]);
        }
    }

    private String getAchievementTypeKey(String tp) {
        String sql = "SELECT id FROM achievement_type WHERE name=?";

        try (Connection con = Connectionz.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, tp);
//            
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    return rs.getString(1);
                } else {
                    JOptionPane.showMessageDialog(this, "No achievement type found with the given ID.", "Non-existing ID", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    private static boolean isFieldEmpty(String field) {
        return field == null || field.trim().isEmpty();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReviewerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StudentPage x = new StudentPage();
                x.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JButton exportBtn;
    private javax.swing.JPanel filePnl;
    private javax.swing.JTextField fileTxt;
    private javax.swing.JPanel formPanel;
    private javax.swing.JLabel idAchievementLbl;
    private javax.swing.JTextField idAchievementTxt;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JPanel operationPnl;
    private javax.swing.JButton profileBtn;
    private javax.swing.JPanel studentPanel;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JComboBox typeCmb;
    private javax.swing.JLabel typeLbl;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton uploadBtn;
    // End of variables declaration//GEN-END:variables

}
